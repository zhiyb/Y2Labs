# Author: Yubo Zhi (yz39g13@soton.ac.uk)

# Outdated warning
define outdated
$(warning "$$($1) outdated, use $$($2) instead")
endef

ifndef LIBTRG
# Defaults
OPTLEVEL	?= s
endif
#CROSS_COMPILE	?=

# Subdirectories
define inc_subdir
DIR	= $(1)
include $(1)/Makefile
SRC	+= $$(NSRC:%=$$(DIR)/%)
LIB	+= $$(NLIB)
LIBS	+= $$(NLIBS)
DEFS	+= $$(NDEFS)
INCDIRS	+= $$(NINCDIRS:%=$$(DIR)/%)
endef

$(foreach dir,$(SUBDIRS),$(eval $(call inc_subdir,$(dir))))

# Libs
LIBDIR	?= ..
LIBDIRS	= $(LIB:%=$(LIBDIR)/lib%)
LIBFILES	= $(foreach lib,$(LIB),$(lib:%=$(LIBDIR)/lib%)/$(lib:%=lib%.a))

ifndef LIBTRG
# General
ifndef TRG
$(call outdated,PRG,TRG)
TRG	= $(PRG)
endif
endif

ifeq ($(OS),Windows_NT)
	TRG	:= $(TRG).exe
endif


#DEFS	+= -fpack-struct -fshort-enums
#DEFS	+= -funsigned-bitfields -funsigned-char
NEWLIBS	= $(LIBDIRS:%=-L%) $(LIB:%=-l%)
INCS	+= $(LIBDIRS:%=-I%)
INCS	+= $(INCDIRS:%=-I%)

ELF	= $(TRG)$(SUFFIX)
OBJS	= $(subst .S,.o,$(subst .c,.o,$(SRC:.cpp=.o)))
DEPS	= $(OBJS:.o=.d)

AR	= $(CROSS_COMPILE)ar
AS	= $(CROSS_COMPILE)gcc
CC	= $(CROSS_COMPILE)gcc
CXX	= $(CROSS_COMPILE)g++
LD	= $(CROSS_COMPILE)g++
SIZE	= $(CROSS_COMPILE)size
OBJCOPY	= $(CROSS_COMPILE)objcopy

FLAGS	?= -g -Wall -Werror
ifdef OPTIMIZE
ifndef LIBTRG
$(call outdated,OPTIMIZE,OPTLEVEL)
endif
FLAGS	+= $(OPTIMIZE)
else
FLAGS	+= -O$(OPTLEVEL)
endif

# Exports
export DEFS OPTIMIZE OPTLEVEL

ARFLAGS	= $(ARFLG) rcs
ASFLAGS	= $(ASFLG) $(DEFS) $(INCS) $(FLAGS)
CFLAGS	= $(CFLG) $(DEFS) $(INCS) $(FLAGS)
CXXFLAGS	= $(CXXFLG) $(DEFS) $(INCS) $(FLAGS)
LDFLAGS	= $(LDFLG) $(FLAGS)

# Verbose display
define verbose
	@if [ 'x$(VERBOSE)' = x ]; then	\
		echo "  "$1;		\
	else				\
		echo $2;		\
	fi
	@$2
endef

# Rules
ifdef LIBTRG
all: lib
else
all: $(ELF)
endif

CLEAN_FILES	+= $(ELF) $(OBJS)
$(ELF): $(OBJS) $(LIBFILES)
	$(call verbose,"LD	$@",\
	$(LD) $(LDFLAGS) -o $@ $(OBJS) $(NEWLIBS) $(LIBS))
	$(call verbose,"SIZE	$@",\
	$(SIZE) $@)

%.o: %.c
	$(call verbose,"CC	$<",\
	$(CC) $(CFLAGS) -c -o $@ $<)

%.o: %.cpp
	$(call verbose,"CXX	$<",\
	$(CXX) $(CXXFLAGS) -c -o $@ $<)

%.o: %.S
	$(call verbose,"AS	$<",\
	$(AS) $(ASFLAGS) -c -o $@ $<)

%.lst: %.elf
	$(call verbose,"GEN	$@",\
	$(OBJDUMP) -h -S $< > $@)

ifdef LIBTRG
# Rule for building library
.PHONY: lib
lib: lib-static

.PHONY: lib-static
lib-static: lib$(LIBTRG).a
CLEAN_FILES	+= lib$(LIBTRG).a

lib$(LIBTRG).a: $(OBJS)
	$(call verbose,"AR	$@",\
	$(AR) $(ARFLAGS) $@ $(OBJS))

# Libraries
$(LIBFILES): %:
	$(call verbose,"MAKE	$@",\
	$(MAKE) -C $(dir $@))
endif

# Dependency
CLEAN_FILES	+= $(DEPS) $(DEPS:%=%.*)
-include $(DEPS)

%.d: %.c
	@set -e; rm -f $@; \
	$(CC) -MM $(CFLAGS) $< | \
	sed 's,[^:]*\.o[ :]*,$(<:.c=.o) $@ : ,g' > $@;

%.d: %.cpp
	@set -e; rm -f $@; \
	$(CXX) -MM $(CXXFLAGS) $< | \
	sed 's,[^:]*\.o[ :]*,$(<:.cpp=.o) $@ : ,g' > $@;

# Clean up
ifndef LIBTRG
CLEAN_DIRS	+= $(LIBDIRS:%=clean-%)
endif
.PHONY: $(CLEAN_DIRS)
$(CLEAN_DIRS):
	$(call verbose,"CLEAN	$(@:clean-%=%)",\
	$(MAKE) -C $(@:clean-%=%) clean)

.PHONY: clean
clean: $(CLEAN_DIRS)
	$(call verbose,"CLEAN	$(CLEAN_FILES)",\
	$(RM) $(CLEAN_FILES))
